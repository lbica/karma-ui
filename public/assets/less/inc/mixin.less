// main: ../app.less


// --------------------------------------
// Transitions
// --------------------------------------
.transition(@transition) {
  -webkit-transition: @transition;
          transition: @transition;
}
.transition-property(@transition-property) {
  -webkit-transition-property: @transition-property;
          transition-property: @transition-property;
}
.transition-delay(@transition-delay) {
  -webkit-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
  -webkit-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}
.transition-transform(@transition) {
  -webkit-transition: -webkit-transform @transition;
     -moz-transition: -moz-transform @transition;
       -o-transition: -o-transform @transition;
          transition: transform @transition;
}

// --------------------------------------
// Transformations
// --------------------------------------

.rotate(@degrees) {
  -webkit-transform: rotate(@degrees);
      -ms-transform: rotate(@degrees); // IE9+
          transform: rotate(@degrees);
}
.scale(@ratio) {
  -webkit-transform: scale(@ratio);
      -ms-transform: scale(@ratio); // IE9+
          transform: scale(@ratio);
}
.translate(@x; @y) {
  -webkit-transform: translate(@x, @y);
      -ms-transform: translate(@x, @y); // IE9+
          transform: translate(@x, @y);
}
.skew(@x; @y) {
  -webkit-transform: skew(@x, @y);
      -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
          transform: skew(@x, @y);
}
.translate3d(@x; @y; @z) {
  -webkit-transform: translate3d(@x, @y, @z);
          transform: translate3d(@x, @y, @z);
}

.rotateX(@degrees) {
  -webkit-transform: rotateX(@degrees);
      -ms-transform: rotateX(@degrees); // IE9+
          transform: rotateX(@degrees);
}
.rotateY(@degrees) {
  -webkit-transform: rotateY(@degrees);
      -ms-transform: rotateY(@degrees); // IE9+
          transform: rotateY(@degrees);
}
.perspective(@perspective) {
  -webkit-perspective: @perspective;
     -moz-perspective: @perspective;
          perspective: @perspective;
}
.perspective-origin(@perspective) {
  -webkit-perspective-origin: @perspective;
     -moz-perspective-origin: @perspective;
          perspective-origin: @perspective;
}
.transform-origin(@origin){
  -webkit-transform-origin: @origin;
     -moz-transform-origin: @origin;
          transform-origin: @origin;
}

// --------------------------------------
//  Scale 3d
// --------------------------------------
.scale3d(...) {
  @process: ~`(function(e){return e=e||"1, 1, 1"})((function(){var e="@{arguments}";return e=e.replace(/^\[|\]@/g,"")})())`;
  -webkit-transform: scale3d(@process);
  -moz-transform: scale3d(@process);
  -ms-transform: scale3d(@process);
  -o-transform: scale3d(@process);
  transform: scale3d(@process);
}

// --------------------------------------
// Color operation mixin
// --------------------------------------

// Lighten and Darken Tones
// --------------------------------------

.lighten(@color, @percent){
	@l-color: lighten(desaturate(@color,(@percent/5)+2), @percent);  
}
.darken(@color, @percent){
	@d-color: darken(desaturate(@color,(@percent/5)+2), @percent);
}

.generate-lightness(@color, @step, @n, @i: 1) when (@i =< @n) {
  
  @percent: @i*@step;

  &.lighten-bg-@{percent}{
    .lighten(@color, @percent);
    background-color: @l-color!important;
    color: contrast(@l-color)!important;
    content: ~"@{l-color}";
  }

  &.darken-bg-@{percent}{
    .darken(@color, @percent);
    background-color: @d-color!important;
    color: contrast(@d-color)!important;
    content: ~"@{d-color}";
  }
  .generate-lightness(@color, @step, @n, (@i + 1));
}

.generate-lightness(@brand-primary,3, 14);


// Tint and Shade tones
// --------------------------------------

.tint(@color, @percent){
	@t-color: tint(@color, @percent);
}
.shade(@color, @percent){
	@s-color: shade(@color, @percent);
}

.generate-tint(@color, @step, @n, @i: 1) when (@i =< @n) {
  @percent: @i*@step;

  &.tint-bg-@{percent}{
    .tint(@color, @percent);
    background-color: @t-color!important;
    color: contrast(@t-color, #008cc0,#b3e1f2, 40%)!important;
    
    &:before{content: "@{t-color}";}
  }

  &.shade-bg-@{percent}{
    .shade(@color, @percent);
    background-color: @s-color!important;
    color: contrast(@s-color, #0da0d7,#b3e1f2, 70%)!important;
    
      &:before{content: "@{s-color}";}
  }
  .generate-tint(@color, @step, @n, (@i + 1));
}

.generate-tint(@brand-primary,5, 20);



// --------------------------------------
// Pop-in Hover effects
// --------------------------------------

.hover-pop(@background: ~"rgba(0,0,0,0.5)", @radius: 0, @duration: 250ms, @zindex: 0) {
    position: relative;
    
    &:before {
        left: 0;
        top: 0;
        content: "";
        position: absolute;
        width: 100%;
        height: 100%;
        .scale3d(0,0,0);
        .transition(all);
        .transition-duration(@duration);
        .backface-visibility(hidden);
        background-color: @background; 
        //z-index: @zindex;
        border-radius: @radius;
        .opacity(0);
    }
    
    &:hover {
        &:before {
            .scale3d(1,1,1);
            .opacity(1);
        }
    }
}

// --------------------------------------
// FOR mixins
// --------------------------------------

.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

// --------------------------------------
// Checkbox and Radios Validation color
// --------------------------------------

.checkbox-radio-validation(@color: #ccc;) {
    .checkbox {
        .lbl::before{ border-color: @color; }
        
        input[type=checkbox]:checked + .lbl::after{
            border-bottom-color: @color;
            border-left-color: @color;   
        }
    }
    .radio{
        .lbl::before{ border-color: @color; }
        
        input[type=radio]:checked + .lbl::after{
            background: @color;
        }
    } 
}